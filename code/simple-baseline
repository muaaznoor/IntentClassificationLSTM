{"cells":[{"cell_type":"markdown","metadata":{"id":"6coR1XAiLAJz"},"source":["# Simple Baseline Implementation\n","\n","## Markdown Commentary\n","\n","### Description of Simple Baseline \n","\n","In this `simple-baseline.py` script, we attempt to construct two such simple baselines: the majority class baseline and a KNN classifier baseline. \n","\n","The majority class baseline simply predicts the label that shows up most frequently in the training set for all examples. In the training set, the majority class is `label = 50` corresponding to `label_text = calendar_set`, which makes up a mere 7.035% of the dataset. Using this majority prediction, we have a training accuracy of 7.035% and testing accuracy of **7.028%**, which are incredibly low but consistent hence underfit. This would be far too trivial to beat.\n","\n","As a result, we tried to explore a better but still naive baseline by running a Nearest Neighbors Classifier with $k = 1$ that uses Glove embeddings to compute the embedding of each word in an example text, then averages them to get a sentence level embedding for the example. We do this for all examples in both train and test sets. Then, for each testing example, we compute the cosine similarity of its sentence level embedding with the embedding of each of the training examples. The label of this testing example is then taken to be the same label as the training example with the highest cosine similarity. This baseline produced a testing accuracy of **74.65%**, which is somewhat more realistic as a simple baseline to beat.\n","\n","### Sample Output\n","\n","#### Majority Baseline Predictions\n","`majority_test_preds = [50, 50, 50, 50, 50 ... , 50, 50, 50, 50, 50]`\n","\n","#### KNN Baseline Predictions \n","`test_preds = [48, 46, 1, 18, 40, ..., 33, 44, 44, 44, 44]`\n","\n","#### Actual (Gold) Test Labels\n","`df_test['labels'] = [48, 46, 1, 41, 40, ..., 33, 44, 44, 44, 44]`\n","\n","\n","### How to Use This\n","\n","This script runs in a linear fashion to return the scores for both simple baseline - no user inputs needed."]},{"cell_type":"markdown","metadata":{"id":"kROd10HcxR74"},"source":["## Imports"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19624,"status":"ok","timestamp":1670896234521,"user":{"displayName":"Muaaz Noor","userId":"03729992976242415725"},"user_tz":300},"id":"C6FYablO9VRS","outputId":"3db1b1a2-1298-4953-bceb-ae26e1a35e75"},"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import random \n","np.random.seed(42)\n","\n","# NLTK, NumPy, and Pandas.\n","import nltk\n","nltk.download('punkt')\n","from nltk.tree import Tree\n","from numpy import random as rd\n","from nltk.tokenize import word_tokenize\n","import random\n","\n","import collections\n","import re\n","import time\n","import itertools\n","from collections import defaultdict, Counter\n","from IPython.display import clear_output \n","\n","import glob\n","from argparse import ArgumentParser\n","\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torch.utils.data import Dataset, DataLoader"]},{"cell_type":"markdown","metadata":{"id":"ZBlsjn0KncxL"},"source":["## Load Dataset"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18695,"status":"ok","timestamp":1670896253212,"user":{"displayName":"Muaaz Noor","userId":"03729992976242415725"},"user_tz":300},"id":"9m4SGpN0nggy","outputId":"8efe4d31-f2c4-41a2-c410-00c21d94132e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":887,"status":"ok","timestamp":1670896254096,"user":{"displayName":"Muaaz Noor","userId":"03729992976242415725"},"user_tz":300},"id":"CmUN4g-VnrVj","outputId":"f36d1bb8-35ae-408f-9a27-61fd4f73cd9f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(11514, 4)"]},"metadata":{},"execution_count":3}],"source":["df_train = pd.read_json(\"/content/drive/Shareddrives/CIS-5300_Final-Project/train.jsonl\", lines=True)\n","df_train.shape"]},{"cell_type":"code","source":["df_train['label_text'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zd4-zrZALOtJ","executionInfo":{"status":"ok","timestamp":1670896256372,"user_tz":300,"elapsed":143,"user":{"displayName":"Muaaz Noor","userId":"03729992976242415725"}},"outputId":"018b2967-7980-4477-900e-3af00337a54d"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["calendar_set                810\n","play_music                  639\n","weather_query               573\n","calendar_query              566\n","general_quirky              555\n","qa_factoid                  544\n","news_query                  503\n","email_query                 418\n","email_sendemail             354\n","datetime_query              350\n","calendar_remove             312\n","play_radio                  283\n","social_post                 283\n","qa_definition               267\n","transport_query             227\n","cooking_recipe              207\n","lists_query                 198\n","play_podcasts               193\n","recommendation_events       190\n","alarm_set                   182\n","lists_createoradd           177\n","recommendation_locations    173\n","lists_remove                164\n","music_query                 154\n","iot_hue_lightoff            153\n","qa_stock                    152\n","play_audiobook              150\n","qa_currency                 142\n","takeaway_order              135\n","alarm_query                 130\n","transport_ticket            127\n","email_querycontact          127\n","iot_hue_lightchange         125\n","iot_coffee                  124\n","takeaway_query              122\n","transport_traffic           117\n","music_likeness              113\n","play_game                   112\n","audio_volume_up             110\n","audio_volume_mute           110\n","social_query                108\n","transport_taxi              100\n","iot_cleaning                 93\n","alarm_remove                 78\n","qa_maths                     78\n","iot_hue_lightdim             76\n","iot_hue_lightup              76\n","general_joke                 72\n","recommendation_movies        70\n","email_addcontact             54\n","iot_wemo_off                 52\n","datetime_convert             52\n","audio_volume_down            52\n","music_settings               51\n","iot_wemo_on                  48\n","general_greet                25\n","iot_hue_lighton              22\n","audio_volume_other           18\n","music_dislikeness            14\n","cooking_query                 4\n","Name: label_text, dtype: int64"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":892,"status":"ok","timestamp":1670554786867,"user":{"displayName":"Adiwid Devahastin Na Ayudhya","userId":"07673289030465995741"},"user_tz":300},"id":"ikNFPOY8n-mm","outputId":"e87eb2c1-c5ca-46ec-a6ee-f730423ce5c3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2033, 4)"]},"metadata":{},"execution_count":4}],"source":["df_validation = pd.read_json(\"/content/drive/Shareddrives/CIS-5300_Final-Project/validation.jsonl\", lines=True)\n","df_validation.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1670554786868,"user":{"displayName":"Adiwid Devahastin Na Ayudhya","userId":"07673289030465995741"},"user_tz":300},"id":"ZGmrNL2Kn_uT","outputId":"e3b9a86f-7c0c-4fe4-8beb-76d852e25d33"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2974, 4)"]},"metadata":{},"execution_count":5}],"source":["df_test = pd.read_json(\"/content/drive/Shareddrives/CIS-5300_Final-Project/test.jsonl\", lines=True)\n","df_test.shape"]},{"cell_type":"markdown","metadata":{"id":"j6nPFGrp1QKz"},"source":["## Option 1: Majority Class"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1670554786870,"user":{"displayName":"Adiwid Devahastin Na Ayudhya","userId":"07673289030465995741"},"user_tz":300},"id":"dP5E30pM1D3i","outputId":"18ee6017-1a3a-40a8-82c9-af8564d8ff90"},"outputs":[{"output_type":"stream","name":"stdout","text":["The Simple Majority Class Baseline has a training accuracy of 7.035%\n"]}],"source":["# Simple Baseline's Train Accuracy\n","simple_train_acc = df_train['label_text'].value_counts(normalize = True).head(1).values[0]\n","print(f\"The Simple Majority Class Baseline has a training accuracy of {round(simple_train_acc*100,3)}%\")"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":6,"status":"ok","timestamp":1670555840966,"user":{"displayName":"Adiwid Devahastin Na Ayudhya","userId":"07673289030465995741"},"user_tz":300},"id":"ehclE_b5YJXY","colab":{"base_uri":"https://localhost:8080/"},"outputId":"4cb505c8-180e-47ac-b3ff-06b7a6c9a3e1"},"outputs":[{"output_type":"stream","name":"stdout","text":["The majority class label is 50 which refers to the text label calendar_set\n"]}],"source":["# Get label\n","majority_label = df_train['label'].value_counts(normalize = True).index[0]\n","majority_label_name = df_train['label_text'].value_counts(normalize = True).index[0]\n","majority_test_preds = [majority_label] * df_test.shape[0]\n","\n","print(f\"The majority class label is {majority_label} which refers to the text label {majority_label_name}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1670554787072,"user":{"displayName":"Adiwid Devahastin Na Ayudhya","userId":"07673289030465995741"},"user_tz":300},"id":"ZHIZNkrtYrpg","outputId":"e003d78e-2dcf-47b0-9a41-337c6401449b"},"outputs":[{"output_type":"stream","name":"stdout","text":["The Simple Majority Class Baseline has a testing accuracy of 7.028%\n"]}],"source":["# Test Accuracy\n","simple_test_acc = sum([majority_label == test_label for test_label in df_test['label']])/df_test.shape[0]\n","print(f\"The Simple Majority Class Baseline has a testing accuracy of {round(simple_test_acc*100,3)}%\")"]},{"cell_type":"markdown","metadata":{"id":"rrrXleWYxT1L"},"source":["## Option 2: KNN via Word2Vec and Cosine Similarity\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Q5ulmPzRwr3T"},"source":["### [Glove Embeddings](https://nlp.stanford.edu/projects/glove/) \n","We are downloading pretrained glove word vectors that has been trained on Common Crawl data, a snapshot of the whole web.\n","These embeddings serve as excelent initilizations for embeddings our model needs.\n","Downloading glove embeddings (This will take around 10 minutes) "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":74765,"status":"ok","timestamp":1670555025058,"user":{"displayName":"Adiwid Devahastin Na Ayudhya","userId":"07673289030465995741"},"user_tz":300},"id":"nT27aeXBVw01","outputId":"be278dd5-6029-46b6-e7d1-ec5aaba81e4f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Archive:  /content/drive/Shareddrives/CIS-5300_Final-Project/glove.840B.300d.zip\n","  inflating: glove.840B.300d.txt     \n","total 5513928\n","drwxr-xr-x 1 root root       4096 Dec  9 03:02 .\n","drwx------ 6 root root       4096 Dec  9 02:59 drive\n","drwxr-xr-x 1 root root       4096 Dec  9 02:58 ..\n","drwxr-xr-x 1 root root       4096 Dec  7 14:41 sample_data\n","drwxr-xr-x 4 root root       4096 Dec  7 14:40 .config\n","-rw-rw-r-- 1 root root 5646236541 Oct 24  2015 glove.840B.300d.txt\n"]}],"source":["#this takes about 10 minutes to run\n","#!wget -nc https://downloads.cs.stanford.edu/nlp/data/glove.840B.300d.zip\n","!unzip /content/drive/Shareddrives/CIS-5300_Final-Project/glove.840B.300d.zip\n","!ls -lat"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gukyScOlS6Ri"},"outputs":[],"source":["glove_file = \"glove.840B.300d.txt\""]},{"cell_type":"markdown","metadata":{"id":"XQFTGrqGT6WF"},"source":["#### Create Vocab Set"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2AsW9_eWTtU6"},"outputs":[],"source":["df_all = pd.concat([df_train, df_validation, df_test]).reset_index()\n","\n","tokenized_data = [word_tokenize(df_all['text'][i]) for i in range(len(df_all['text']))]\n","\n","vocab = {word for sentence in tokenized_data for word in sentence}"]},{"cell_type":"markdown","metadata":{"id":"JFe9SkOcYugK"},"source":["#### Get Glove embeddings"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4RNiORwiYTzi"},"outputs":[],"source":["# Takes about 1 minute to read through the whole file and find the words we need. Adapted from HW3\n","def get_glove_mapping(vocab, file):\n","    \"\"\"\n","    Gets the mapping of words from the vocabulary to pretrained embeddings\n","    \n","    INPUT:\n","    vocab       - set of vocabulary words\n","    file        - file with pretrained embeddings\n","\n","    OUTPUT:\n","    glove_map   - mapping of words in the vocabulary to the pretrained embedding\n","    \n","    \"\"\"\n","    \n","    glove_map = {}\n","    with open(file,'rb') as fi:\n","        for l in fi:\n","            try:\n","                emd_lst = l.decode().split(' ')\n","                word = emd_lst.pop(0)\n","                emd_lst = [float(n) for n in emd_lst]\n","\n","                if word in vocab:\n","                  glove_map[word] = np.array(emd_lst)\n","            except:\n","                pass\n","    return glove_map"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kYettRoymWTz"},"outputs":[],"source":["# Get the glove maps\n","glove_map = get_glove_mapping(vocab,glove_file)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Q6TcjLDmmwx2"},"outputs":[],"source":["# from gensim.models import Word2Vec\n","# from gensim.test.utils import common_texts\n","from sklearn.metrics.pairwise import cosine_similarity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Hquvx2X0sFFf"},"outputs":[],"source":["# Define helper for cosine similarity\n","def cosine_similarity(u,v):\n","  return np.dot(u,v)/(np.linalg.norm(v)*np.linalg.norm(u))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FbYSENfurbUp"},"outputs":[],"source":["# Run training loop\n","train_sentence_embeddings = []\n","\n","# for text in df_train:\n","for i in range(len(df_train)):\n","  text = df_train['text'][i]\n","  word_list = text.split()\n","\n","  # Get word embeddings\n","  word_embeddings = [glove_map[word] if word in glove_map.keys() else np.random.normal(size = 300) for word in word_list]\n","  \n","  # Compute sentence embedding as the average of the word embeddings\n","  average_emb = np.mean(word_embeddings, axis = 0)\n","  train_sentence_embeddings.append(average_emb)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aC2P39n80155","executionInfo":{"status":"ok","timestamp":1670555638242,"user_tz":300,"elapsed":442131,"user":{"displayName":"Adiwid Devahastin Na Ayudhya","userId":"07673289030465995741"}},"outputId":"46ec714d-7f8b-4ede-e5f5-c96d44e41590"},"outputs":[{"output_type":"stream","name":"stdout","text":["Test Iteration:  2973 \n","\n"]}],"source":["# Get testing embeddings and predictions\n","test_sentence_embeddings = []\n","test_preds = []\n","\n","# for text in df_test:\n","for i in range(len(df_test)):\n","  clear_output()\n","  print(\"Test Iteration: \", i, \"\\n\")\n","  text = df_test['text'][i]\n","  word_list = text.split()\n","\n","  # Get word embeddings\n","  word_embeddings = [glove_map[word] if word in glove_map.keys() else np.random.normal(size = 300) for word in word_list]\n","  \n","  # Compute sentence embedding as the average of the word embeddings\n","  average_emb = np.mean(word_embeddings, axis = 0)\n","  # test_sentence_embeddings.append(average_emb)\n","\n","  # For this embedding, compare vs. all train embeddings and then argmax and back out the label from the training\n","  cosine_sim_list = [cosine_similarity(average_emb, train_example_emb) for train_example_emb in train_sentence_embeddings]\n","\n","  max_train_idx = np.argmax(cosine_sim_list)\n","  test_preds.append(df_train['label'][max_train_idx])"]},{"cell_type":"code","source":["# Visualize\n","pd.DataFrame({'KNN Test Predictions': test_preds,\n","              'Gold Test Label': list(df_test['label'])})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"3_JuAmbU1VZS","executionInfo":{"status":"ok","timestamp":1670555690288,"user_tz":300,"elapsed":157,"user":{"displayName":"Adiwid Devahastin Na Ayudhya","userId":"07673289030465995741"}},"outputId":"e5017de6-e4c6-47dd-e748-630dbd62c25a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      KNN Test Predictions  Gold Test Label\n","0                       48               48\n","1                       46               46\n","2                        1                1\n","3                       18               41\n","4                       40               40\n","...                    ...              ...\n","2969                    33               33\n","2970                    44               44\n","2971                    44               44\n","2972                    44               44\n","2973                    44               44\n","\n","[2974 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-6c4ab140-c268-4916-8a2e-367fd96a26a1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>KNN Test Predictions</th>\n","      <th>Gold Test Label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>48</td>\n","      <td>48</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>46</td>\n","      <td>46</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>18</td>\n","      <td>41</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>40</td>\n","      <td>40</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2969</th>\n","      <td>33</td>\n","      <td>33</td>\n","    </tr>\n","    <tr>\n","      <th>2970</th>\n","      <td>44</td>\n","      <td>44</td>\n","    </tr>\n","    <tr>\n","      <th>2971</th>\n","      <td>44</td>\n","      <td>44</td>\n","    </tr>\n","    <tr>\n","      <th>2972</th>\n","      <td>44</td>\n","      <td>44</td>\n","    </tr>\n","    <tr>\n","      <th>2973</th>\n","      <td>44</td>\n","      <td>44</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2974 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c4ab140-c268-4916-8a2e-367fd96a26a1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6c4ab140-c268-4916-8a2e-367fd96a26a1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6c4ab140-c268-4916-8a2e-367fd96a26a1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":20}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P1yw3rT0ugkb","executionInfo":{"status":"ok","timestamp":1670555638789,"user_tz":300,"elapsed":9,"user":{"displayName":"Adiwid Devahastin Na Ayudhya","userId":"07673289030465995741"}},"outputId":"233b8851-bbe1-4bdc-c33a-653f241de965"},"outputs":[{"output_type":"stream","name":"stdout","text":["Simple KNN Baseline Testing Accuracy: 75.017%\n"]}],"source":["# Get Simple KNN Baseline Testing Accuracy\n","print(f\"Simple KNN Baseline Testing Accuracy: {round(100*sum(test_preds == df_test.label)/len(df_test.label),3)}%\")"]}],"metadata":{"colab":{"toc_visible":true,"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}